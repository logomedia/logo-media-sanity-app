"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _unfetch = _interopRequireDefault(require("unfetch"));

var _xstate = require("xstate");

/* eslint-disable */
var deployMachine = function deployMachine(deployHook) {
  return (0, _xstate.Machine)( // Machine
  {
    id: 'deploy',
    initial: 'idle',
    context: {
      disabled: false,
      feedback: undefined,
      label: undefined,
      error: undefined
    },
    states: {
      idle: {
        entry: (0, _xstate.assign)({
          feedback: function feedback(_context, _event) {
            return undefined;
          },
          label: function label(_context, _event) {
            return 'Deploy';
          }
        }),
        on: {
          DEPLOY: 'deploying'
        }
      },
      deploying: {
        entry: (0, _xstate.assign)({
          disabled: function disabled() {
            return true;
          },
          label: function label() {
            return 'Deploying';
          }
        }),
        exit: (0, _xstate.assign)({
          disabled: function disabled() {
            return false;
          },
          label: function label() {
            return 'Deploy';
          }
        }),
        invoke: {
          onDone: {
            target: 'success'
          },
          onError: {
            target: 'error',
            actions: (0, _xstate.assign)({
              error: function error(_context, event) {
                return event.data;
              }
            })
          },
          src: 'deploy'
        }
      },
      success: {
        entry: [(0, _xstate.assign)({
          feedback: function feedback() {
            return 'Succesfully started!';
          }
        })],
        exit: (0, _xstate.assign)({
          feedback: function feedback() {
            return undefined;
          }
        }),
        on: {
          DEPLOY: 'deploying'
        }
      },
      error: {
        on: {
          DEPLOY: 'deploying'
        }
      }
    }
  }, // Config
  {
    services: {
      deploy: function deploy() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise( /*#__PURE__*/function () {
          var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(resolve, reject) {
            var res, data, errorMessage;
            return _regenerator["default"].wrap(function _callee$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.prev = 0;

                    if (deployHook) {
                      _context2.next = 3;
                      break;
                    }

                    return _context2.abrupt("return", reject('No deployHook URL defined'));

                  case 3:
                    _context2.next = 5;
                    return (0, _unfetch["default"])(deployHook, {
                      method: 'POST'
                    });

                  case 5:
                    res = _context2.sent;
                    _context2.next = 8;
                    return res.json();

                  case 8:
                    data = _context2.sent;

                    if (!res.ok) {
                      errorMessage = (data === null || data === void 0 ? void 0 : data.error).message || res.statusText;
                      reject(errorMessage);
                    }

                    resolve();
                    _context2.next = 17;
                    break;

                  case 13:
                    _context2.prev = 13;
                    _context2.t0 = _context2["catch"](0);
                    console.error('Unable to deploy with error:', _context2.t0);
                    reject('Please check the developer console for more information');

                  case 17:
                    resolve();

                  case 18:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, null, [[0, 13]]);
          }));

          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }
  });
};

var _default = deployMachine;
exports["default"] = _default;