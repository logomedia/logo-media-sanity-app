"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _xstate = require("xstate");

/* eslint-disable @typescript-eslint/no-explicit-any */
var sortByTargetName = function sortByTargetName(items) {
  return items.sort(function (a, b) {
    if (a.name > b.name) {
      return 1;
    }

    if (a.name < b.name) {
      return -1;
    }

    return 0;
  });
};

var deploymentTargetListMachine = function deploymentTargetListMachine() {
  return (0, _xstate.Machine)({
    context: {
      message: '',
      results: []
    },
    initial: 'pending',
    states: {
      pending: {
        invoke: {
          src: 'fetchDataService',
          onDone: {
            actions: ['setResults'],
            target: 'ready'
          },
          onError: {
            actions: ['setMessage'],
            target: 'failed'
          }
        }
      },
      ready: {
        initial: 'unknown',
        on: {
          CREATE: {
            actions: ['targetCreate']
          },
          DELETE: {
            actions: ['targetDelete']
          },
          UPDATE: {
            actions: ['targetUpdate']
          }
        },
        states: {
          unknown: {
            always: [{
              cond: 'hasData',
              target: 'withData'
            }, {
              cond: 'hasNoData',
              target: 'withoutData'
            }]
          },
          withData: {
            always: [{
              cond: 'hasNoData',
              target: 'withoutData'
            }]
          },
          withoutData: {
            always: [{
              cond: 'hasData',
              target: 'withData'
            }]
          }
        }
      },
      failed: {
        type: 'final'
      }
    }
  }, {
    actions: {
      setMessage: (0, _xstate.assign)(function (_context, event) {
        return {
          message: event.data.details.description
        };
      }),
      setResults: (0, _xstate.assign)(function (_context, event) {
        return {
          results: event.data
        };
      }),
      targetCreate: (0, _xstate.assign)(function (context, event) {
        return {
          results: sortByTargetName([].concat((0, _toConsumableArray2["default"])(context.results), [event.deploymentTarget]))
        };
      }),
      targetDelete: (0, _xstate.assign)(function (context, event) {
        return {
          results: context.results.filter(function (target) {
            return target._id !== event.id;
          })
        };
      }),
      targetUpdate: (0, _xstate.assign)(function (context, event) {
        var deploymentTarget = event.deploymentTarget;
        var index = context.results.findIndex(function (target) {
          return target._id === deploymentTarget._id;
        });
        var updatedResults = Object.assign([], context.results, (0, _defineProperty2["default"])({}, index, event.deploymentTarget));
        return {
          results: sortByTargetName(updatedResults)
        };
      })
    },
    guards: {
      hasData: function hasData(context) {
        var _context$results;

        return (context === null || context === void 0 ? void 0 : (_context$results = context.results) === null || _context$results === void 0 ? void 0 : _context$results.length) > 0;
      },
      hasNoData: function hasNoData(context) {
        var _context$results2;

        return (context === null || context === void 0 ? void 0 : (_context$results2 = context.results) === null || _context$results2 === void 0 ? void 0 : _context$results2.length) === 0;
      }
    }
  });
};

var _default = deploymentTargetListMachine;
exports["default"] = _default;