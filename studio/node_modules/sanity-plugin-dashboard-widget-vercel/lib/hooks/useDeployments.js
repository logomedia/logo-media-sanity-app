"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectHash = _interopRequireDefault(require("object-hash"));

var _reactQuery = require("react-query");

var _fetcher = _interopRequireDefault(require("../utils/fetcher"));

var _constants = require("../constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useDeployments = function useDeployments(deploymentTarget, options) {
  var _options$enabled;

  var fetchUrl = (0, _fetcher["default"])(deploymentTarget); // Fetch deployments

  var deployParams = new URLSearchParams();
  deployParams.set('limit', String(deploymentTarget === null || deploymentTarget === void 0 ? void 0 : deploymentTarget.deployLimit));

  var _useQuery = (0, _reactQuery.useQuery)((0, _objectHash["default"])(deploymentTarget), // key
  function () {
    return fetchUrl(_constants.API_ENDPOINT_DEPLOYMENTS, deployParams);
  }, {
    enabled: (_options$enabled = options === null || options === void 0 ? void 0 : options.enabled) !== null && _options$enabled !== void 0 ? _options$enabled : true,
    refetchInterval: 20000,
    // ms
    refetchIntervalInBackground: false,
    refetchOnMount: true,
    refetchOnReconnect: 'always',
    refetchOnWindowFocus: false,
    retry: false
  }),
      deploymentsData = _useQuery.data,
      deploymentsIsFetching = _useQuery.isFetching,
      deploymentsIsSuccess = _useQuery.isSuccess,
      deploymentsError = _useQuery.error,
      refetch = _useQuery.refetch; // Fetch aliases (only if deployments have been retrieved)


  var aliasParams = new URLSearchParams();
  aliasParams.set('limit', '20');

  var _useQuery2 = (0, _reactQuery.useQuery)("".concat((0, _objectHash["default"])(deploymentTarget), "-aliases"), // key
  function () {
    return fetchUrl(_constants.API_ENDPOINT_ALIASES, aliasParams);
  }, {
    enabled: !!deploymentsData,
    refetchOnMount: false,
    refetchOnReconnect: false,
    refetchOnWindowFocus: false,
    retry: false
  }),
      aliasesData = _useQuery2.data,
      aliasesIsFetching = _useQuery2.isFetching,
      aliasesIsSuccess = _useQuery2.isSuccess,
      aliasesError = _useQuery2.error;

  var aliases = aliasesData === null || aliasesData === void 0 ? void 0 : aliasesData.aliases;
  var deploymentsWithAlias = undefined;

  if (aliases) {
    var _deploymentsData$depl;

    deploymentsWithAlias = deploymentsData === null || deploymentsData === void 0 ? void 0 : (_deploymentsData$depl = deploymentsData.deployments) === null || _deploymentsData$depl === void 0 ? void 0 : _deploymentsData$depl.map(function (val) {
      var alias = aliases.find(function (alias) {
        return alias.deploymentId === val.uid;
      });
      return _objectSpread(_objectSpread({}, val), {}, {
        alias: alias === null || alias === void 0 ? void 0 : alias.alias
      });
    });
  }

  return {
    deployments: deploymentsWithAlias,
    error: aliasesError || deploymentsError,
    isFetching: aliasesIsFetching || deploymentsIsFetching,
    isSuccess: aliasesIsSuccess && deploymentsIsSuccess,
    refetch: refetch
  };
};

var _default = useDeployments;
exports["default"] = _default;